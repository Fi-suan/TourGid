import fetch from 'node-fetch';

// –ß–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ, –∞ –Ω–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
const getGoogleApiKey = () => process.env.GOOGLE_API_KEY;
const getOpenAiApiKey = () => process.env.OPENAI_API_KEY;

export const transcribeAudio = async (audioData: string): Promise<string | null> => {
    try {
        const GOOGLE_API_KEY = getGoogleApiKey();
        
        console.log('üé§ Transcribing audio...');
        console.log('üìä Audio data length:', audioData?.length || 0);
        console.log('üîë API Key present:', !!GOOGLE_API_KEY);
        
        if (!GOOGLE_API_KEY) {
            throw new Error('GOOGLE_API_KEY not configured in backend .env');
        }
        
        const response = await fetch(`https://speech.googleapis.com/v1/speech:recognize?key=${GOOGLE_API_KEY}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                config: {
                    encoding: 'MP3', // M4A/AAC –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ MP3 –¥–ª—è Google STT
                    sampleRateHertz: 16000,
                    languageCode: 'ru-RU',
                    enableAutomaticPunctuation: true,
                    alternativeLanguageCodes: ['kk-KZ', 'en-US'],
                    model: 'default', // –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å
                    useEnhanced: false,
                },
                audio: {
                    content: audioData,
                },
            }),
        });

        console.log('üì° Google STT Response status:', response.status);

        if (!response.ok) {
            const errorBody = await response.json();
            console.error('‚ùå Google STT API Error:', JSON.stringify(errorBody, null, 2));
            throw new Error(`Google STT API error: ${response.status} - ${JSON.stringify(errorBody)}`);
        }

        const data = await response.json();
        console.log('‚úÖ Google STT Response:', JSON.stringify(data, null, 2));
        
        if (data.results && data.results[0]?.alternatives[0]) {
            const transcript = data.results[0].alternatives[0].transcript;
            console.log('üìù Transcribed text:', transcript);
            return transcript;
        }
        
        console.warn('‚ö†Ô∏è No transcription results');
        return null;

    } catch (error) {
        console.error('‚ùå Error in transcribeAudio service:', error);
        throw error;
    }
};

export const processTextQuery = async (text: string, context: any): Promise<any> => {
    try {
        const OPENAI_API_KEY = getOpenAiApiKey();
        
        console.log('ü§ñ Processing query with OpenAI...');
        console.log('üìù Query text:', text);
        console.log('üîë OpenAI API Key present:', !!OPENAI_API_KEY);
        console.log('üîë API Key starts with:', OPENAI_API_KEY?.substring(0, 10) || 'UNDEFINED');
        
        if (!OPENAI_API_KEY) {
            throw new Error('OPENAI_API_KEY not configured in backend .env');
        }
        
        const systemPrompt = `–¢—ã - —É–º–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è TourGid Kazakhstan.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON.

–ö–û–ù–¢–ï–ö–°–¢:
- –¢–µ–∫—É—â–∏–π —Ä–µ–≥–∏–æ–Ω: ${context.region || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
- –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${context.availableAttractions || '–∑–∞–≥—Ä—É–∑–∫–∞...'}
- –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: ${context.categories || '–º—É–∑–µ–∏, –ø–∞—Ä–∫–∏, –ø—Ä–∏—Ä–æ–¥–∞, –∏—Å—Ç–æ—Ä–∏—è, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –∫—É–ª—å—Ç—É—Ä–∞, —Ä–µ–ª–∏–≥–∏—è'}

–î–û–°–¢–£–ü–ù–´–ï –§–£–ù–ö–¶–ò–ò:
1. "build_route" - –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –∫ –º–µ—Å—Ç—É
   –§–æ—Ä–º–∞—Ç: {"function": "build_route", "destination": "—Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"}
2. "find_attractions" - –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
   –§–æ—Ä–º–∞—Ç: {"function": "find_attractions", "category": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è"}
3. "show_info" - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ
   –§–æ—Ä–º–∞—Ç: {"function": "show_info", "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞"}
4. –ï—Å–ª–∏ —ç—Ç–æ –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å - –¥–∞–π –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç
   –§–æ—Ä–º–∞—Ç: {"responseText": "—Ç–≤–æ–π –æ—Ç–≤–µ—Ç"}

–ü–†–ê–í–ò–õ–ê:
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–ß–ù–´–ï –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
- –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û JSON, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.`;

        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${OPENAI_API_KEY}`
            },
            body: JSON.stringify({
                model: 'gpt-4o',
                messages: [
                    { role: 'system', content: systemPrompt },
                    { role: 'user', content: text }
                ],
                temperature: 0.2,
                max_tokens: 300,
                response_format: { type: "json_object" }
            })
        });

        console.log('üì° OpenAI Response status:', response.status);
        
        if (!response.ok) {
            const errorBody = await response.json();
            console.error('‚ùå OpenAI API Error:', JSON.stringify(errorBody, null, 2));
            throw new Error(`OpenAI API error: ${response.status} - ${JSON.stringify(errorBody)}`);
        }

        const data = await response.json();
        console.log('‚úÖ OpenAI Response received');
        const content = data.choices[0].message.content.trim();
        console.log('üìÑ AI Response:', content);
        return JSON.parse(content);

    } catch (error) {
        console.error('‚ùå Error in processTextQuery service:', error);
        throw error;
    }
};
