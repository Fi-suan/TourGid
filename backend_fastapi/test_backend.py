#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è TourGid FastAPI Backend
"""

import requests
import json

# URL –≤–∞—à–µ–≥–æ backend (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è)
BACKEND_URL = "http://localhost:8000"  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
# BACKEND_URL = "https://your-render-url.onrender.com"  # –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞

def test_backend():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ endpoint'—ã backend'–∞"""
    
    print("üß™ Testing TourGid FastAPI Backend")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: Health check
    print("\n1Ô∏è‚É£ Testing health endpoint...")
    try:
        response = requests.get(f"{BACKEND_URL}/health", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Health check passed")
            print(f"   Response: {response.json()}")
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Health check error: {e}")
    
    # –¢–µ—Å—Ç 2: Root endpoint
    print("\n2Ô∏è‚É£ Testing root endpoint...")
    try:
        response = requests.get(f"{BACKEND_URL}/", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Root endpoint passed")
            print(f"   Message: {response.json().get('message', 'N/A')}")
        else:
            print(f"‚ùå Root endpoint failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Root endpoint error: {e}")
    
    # –¢–µ—Å—Ç 3: Attractions
    print("\n3Ô∏è‚É£ Testing attractions endpoint...")
    try:
        response = requests.get(f"{BACKEND_URL}/attractions", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Attractions endpoint passed")
            print(f"   Count: {data.get('count', 'N/A')}")
            print(f"   First attraction: {data.get('data', [{}])[0].get('name', 'N/A')}")
        else:
            print(f"‚ùå Attractions endpoint failed: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Attractions endpoint error: {e}")
    
    # –¢–µ—Å—Ç 4: AI Voice Processing
    print("\n4Ô∏è‚É£ Testing AI voice processing...")
    try:
        test_query = {
            "query": "–ù–∞–π–¥–∏ –º–∞—Ä—à—Ä—É—Ç –∫ –ë–∞–π—Ç–µ—Ä–µ–∫—É",
            "user_location": {"latitude": 52.3, "longitude": 76.95}
        }
        
        response = requests.post(
            f"{BACKEND_URL}/ai/process-voice",
            json=test_query,
            timeout=15
        )
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ AI voice processing passed")
            print(f"   Intent: {data.get('data', {}).get('intent', 'N/A')}")
            print(f"   Response: {data.get('data', {}).get('response_text', 'N/A')[:50]}...")
        else:
            print(f"‚ùå AI voice processing failed: {response.status_code}")
            print(f"   Error: {response.text}")
    except Exception as e:
        print(f"‚ùå AI voice processing error: {e}")
    
    # –¢–µ—Å—Ç 5: Route Generation
    print("\n5Ô∏è‚É£ Testing route generation...")
    try:
        test_route = {
            "destination_id": "ast001",
            "preferences": ["scenic", "historical"]
        }
        
        response = requests.post(
            f"{BACKEND_URL}/ai/generate-route",
            json=test_route,
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Route generation passed")
            print(f"   Destination: {data.get('data', {}).get('destination', {}).get('name', 'N/A')}")
            print(f"   Distance: {data.get('data', {}).get('route', {}).get('estimated_distance', 'N/A')} km")
        else:
            print(f"‚ùå Route generation failed: {response.status_code}")
            print(f"   Error: {response.text}")
    except Exception as e:
        print(f"‚ùå Route generation error: {e}")
    
    print("\n" + "=" * 50)
    print("üéØ Backend testing completed!")

if __name__ == "__main__":
    test_backend() 