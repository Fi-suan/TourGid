class AIService {
  constructor() {
    this.isRecording = false;
    this.recognition = null;
    this.onError = null;
    this.setupSpeechRecognition();
  }

  setupSpeechRecognition() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –±—Ä–∞—É–∑–µ—Ä–Ω–æ–≥–æ Speech Recognition
    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    
    if (SpeechRecognition) {
      this.recognition = new SpeechRecognition();
      this.recognition.continuous = false;
      this.recognition.interimResults = false;
      this.recognition.lang = 'ru-RU';
      
      console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–π Speech Recognition –¥–æ—Å—Ç—É–ø–µ–Ω');
    } else {
      console.log('‚ùå Speech Recognition –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–∫');
    }
  }

  async startListening(onError) {
    this.onError = onError;
    this.isRecording = true;
    
    if (this.recognition) {
      console.log('üé§ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...');
      return new Promise((resolve, reject) => {
        this.recognition.onresult = (event) => {
          const transcript = event.results[0][0].transcript;
          console.log('üéØ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:', transcript);
          this.isRecording = false;
          resolve(transcript);
        };
        
        this.recognition.onerror = (event) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', event.error);
          this.isRecording = false;
          if (this.onError) this.onError(event.error);
          reject(event.error);
        };
        
        this.recognition.onend = () => {
          this.isRecording = false;
        };
        
        this.recognition.start();
      });
    } else {
      // Fallback –∫ –º–æ–∫—É –µ—Å–ª–∏ Speech Recognition –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      console.log('üé§ –ú–æ–∫: –ù–∞—á–∏–Ω–∞–µ–º "–∑–∞–ø–∏—Å—å"...');
      return Promise.resolve();
    }
  }

  async stopListening() {
    if (!this.isRecording) {
      return null;
    }
    
    if (this.recognition) {
      console.log('üé§ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ...');
      this.recognition.stop();
      return null; // –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –≤ onresult
    } else {
      // –ú–æ–∫ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ Speech Recognition –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
      this.isRecording = false;
      console.log('üé§ –ú–æ–∫: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–∑–∞–ø–∏—Å—å"...');
      
      const mockQueries = [
        '–ø–æ—Å—Ç—Ä–æ–π –º–∞—Ä—à—Ä—É—Ç –¥–æ –º–µ—á–µ—Ç–∏ –ú–∞—à—Ö—É—Ä –ñ—É—Å—É–ø–∞',
        '–ø–æ–∫–∞–∂–∏ –º—É–∑–µ–∏', 
        '–Ω–∞–π–¥–∏ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä—è–¥–æ–º',
        '–º–∞—Ä—à—Ä—É—Ç –¥–æ –Ω–∞–±–µ—Ä–µ–∂–Ω–æ–π –ò—Ä—Ç—ã—à–∞',
        '–ø–æ–∫–∞–∂–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Å—Ç–∞'
      ];
      
      const mockText = mockQueries[Math.floor(Math.random() * mockQueries.length)];
      console.log(`üéØ –ú–æ–∫: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: "${mockText}"`);
      
      await new Promise(resolve => setTimeout(resolve, 1000));
      return mockText;
    }
  }

  async processVoiceQuery(transcribedText, currentLocation) {
    const BACKEND_URL = 'https://tourgid-backend.onrender.com';
    
    const requestData = {
      query: transcribedText,
      user_location: currentLocation || { latitude: 52.3000, longitude: 76.9500 } 
    };

    try {
      console.log('üöÄ === –¢–ï–°–¢ –ë–≠–ö–ï–ù–î–ê GPT-4o ===');
      console.log(`üéØ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "${transcribedText}"`);
      console.log(`üåê URL: ${BACKEND_URL}/api/v2/ai/process-voice`);
      console.log(`üìç –õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`, requestData.user_location);
      console.log(`üìù –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:`, JSON.stringify(requestData, null, 2));
      
      console.log('‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...');
      const startTime = Date.now();
      
      const response = await fetch(`${BACKEND_URL}/api/v2/ai/process-voice`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify(requestData)
      });
      
      const endTime = Date.now();
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${endTime - startTime}–º—Å`);
      console.log(`üìä Status: ${response.status} ${response.statusText}`);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', errorText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}\nResponse: ${errorText}`);
      }

      const result = await response.json();
      console.log('üì¶ –û—Ç–≤–µ—Ç –æ—Ç –±—ç–∫–µ–Ω–¥–∞:', JSON.stringify(result, null, 2));
      
      if (result.success && result.data) {
        console.log('‚úÖ GPT-4o —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –∑–∞–ø—Ä–æ—Å!');
        console.log(`üîß Function: ${result.data.function}`);
        if (result.data.destination) console.log(`üéØ Destination: ${result.data.destination}`);
        if (result.data.category) console.log(`üìÇ Category: ${result.data.category}`);
        if (result.data.preferences) console.log(`‚öôÔ∏è Preferences: ${result.data.preferences}`);
        
        return result.data;
      } else {
        console.error('‚ùå –ë—ç–∫–µ–Ω–¥ –≤–µ—Ä–Ω—É–ª –Ω–µ—É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç:', result.error);
        throw new Error(result.error || 'Backend returned an unsuccessful response without an error message.');
      }
      
    } catch (error) {
      console.error('üí• –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error);
      console.error('üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: 1) URL –±—ç–∫–µ–Ω–¥–∞ 2) –°—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–∞ 3) –†–∞–±–æ—Ç—É GPT-4o');
      throw error;
    }
  }
}

export default new AIService(); 