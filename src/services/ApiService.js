import * as FileSystem from 'expo-file-system/legacy';
import { Platform } from 'react-native';
import Constants from 'expo-constants';

const getApiBaseUrl = () => {
  // In a development build, we can dynamically determine the host machine's IP
  const hostUri = Constants.expoConfig?.hostUri;
  if (hostUri) {
    const ipAddress = hostUri.split(':')[0];
    return `http://${ipAddress}:3000/api`;
  }
  
  // Fallback for production or other environments
  return 'http://localhost:3000/api'; 
};

const API_BASE_URL = getApiBaseUrl();

const apiClient = {
    get: async (endpoint) => {
        try {
            const response = await fetch(`${API_BASE_URL}${endpoint}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return await response.json();
        } catch (error) {
            console.error(`Error fetching from ${endpoint}:`, error);
            throw error;
        }
    },
    post: async (endpoint, body) => {
        try {
            const response = await fetch(`${API_BASE_URL}${endpoint}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            });
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
            }
            return await response.json();
        } catch (error) {
            console.error(`Error posting to ${endpoint}:`, error);
            throw error;
        }
    }
};

export const findPlacePhoto = (query) => {
    return apiClient.get(`/find-place-photo?query=${encodeURIComponent(query)}`);
};

export const getRegions = () => {
    return apiClient.get('/regions');
};

export const getAttractions = (regionId) => {
    const query = regionId ? `?regionId=${regionId}` : '';
    return apiClient.get(`/attractions${query}`);
};

export const getInterests = () => {
    return apiClient.get('/interests');
};

export const getRoutes = (regionId) => {
    const query = regionId ? `?regionId=${regionId}` : '';
    return apiClient.get(`/routes${query}`);
};

export const getHistoricalFacts = (regionId) => {
    const query = regionId ? `?regionId=${regionId}` : '';
    return apiClient.get(`/historical-facts${query}`);
};

export const getPlaceDetails = (placeId) => {
    return apiClient.get(`/place-details?placeId=${placeId}`);
};

/**
 * –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ —Ç–µ–∫—Å—Ç
 * @param {string} audioUri - URI –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
 * @returns {Promise<string>} - —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 */
export const transcribeAudio = async (audioUri) => {
    try {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...');
        
        const audioData = await FileSystem.readAsStringAsync(audioUri, {
            encoding: FileSystem.EncodingType.Base64,
        });
        
        const result = await apiClient.post('/transcribe', { audio: audioData });
        
        if (result.text) {
            console.log('‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:', result.text);
            return result.text;
        }
        
        return null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:', error);
        throw error;
    }
};

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ AI –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
 * @param {string} text - —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
 * @param {Object} context - –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Ä–µ–≥–∏–æ–Ω, –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
 * @returns {Promise<Object>} - –æ—Ç–≤–µ—Ç —Å –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
export const processQuery = async (text, context = {}) => {
    try {
        console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI...');
        
        const result = await apiClient.post('/process-query', { 
            text,
            context 
        });
        
        console.log('‚úÖ AI –æ—Ç–≤–µ—Ç:', result);
        return result;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
        throw error;
    }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ Google Directions API
 * @param {string} origin - –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ "lat,lng"
 * @param {string} destination - –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ "lat,lng"
 * @param {string} waypoints - –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ç–æ—á–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @param {string} mode - —Ä–µ–∂–∏–º –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è (walking, driving, transit)
 * @returns {Promise<Object>} - –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞
 */
export const getDirections = async (origin, destination, waypoints = '', mode = 'walking') => {
    try {
        let url = `/directions?origin=${origin}&destination=${destination}&mode=${mode}`;
        if (waypoints) {
            url += `&waypoints=${waypoints}`;
        }
        console.log('üó∫Ô∏è –ó–∞–ø—Ä–æ—Å –º–∞—Ä—à—Ä—É—Ç–∞ —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥...');
        return await apiClient.get(url);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞:', error);
        throw error;
    }
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–∑—ã–≤—ã –æ –º–µ—Å—Ç–µ
 * @param {string} placeId - Google Place ID
 * @returns {Promise<Object>} - –æ—Ç–∑—ã–≤—ã –∏ —Ä–µ–π—Ç–∏–Ω–≥
 */
export const getPlaceReviews = async (placeId) => {
    try {
        console.log('‚≠ê –ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–æ–≤ —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥...');
        return await apiClient.get(`/place-reviews?placeId=${placeId}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤:', error);
        throw error;
    }
};

/**
 * –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
 * @param {string} address - –∞–¥—Ä–µ—Å –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
 * @returns {Promise<Object>} - –¥–∞–Ω–Ω—ã–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export const geocode = async (address) => {
    try {
        return await apiClient.get(`/geocode?address=${encodeURIComponent(address)}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        throw error;
    }
};

export default {
    getRegions,
    getAttractions,
    getInterests,
    getRoutes,
    getHistoricalFacts,
    getPlaceDetails,
    transcribeAudio,
    processQuery,
    findPlacePhoto,
    getDirections,
    getPlaceReviews,
    geocode,
};
